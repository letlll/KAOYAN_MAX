/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/obsidian-dataview/lib/index.js
var require_lib = __commonJS({
  "node_modules/obsidian-dataview/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require("obsidian");
    var getAPI3 = (app2) => {
      var _a;
      if (app2)
        return (_a = app2.plugins.plugins.dataview) === null || _a === void 0 ? void 0 : _a.api;
      else
        return window.DataviewAPI;
    };
    var isPluginEnabled = (app2) => app2.plugins.enabledPlugins.has("dataview");
    exports.getAPI = getAPI3;
    exports.isPluginEnabled = isPluginEnabled;
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SimpleNoteReviewPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian9 = require("obsidian");
var import_obsidian_dataview2 = __toESM(require_lib());

// src/noteSet/INoteSet.ts
var EmptyNoteSet = class {
  constructor() {
    this.id = crypto.randomUUID();
  }
};

// src/dataview/dataviewFacade.ts
var import_obsidian_dataview = __toESM(require_lib());
var DataviewNotInstalledError = class extends Error {
  constructor() {
    super();
    this.message = "Dataview plugin not installed. To use Simple Note Review, Dataview plugin is needed.";
  }
};
var DataviewFacade = class {
  constructor() {
    this.isDataviewInstalled = false;
    try {
      this._api = (0, import_obsidian_dataview.getAPI)();
      if (this._api)
        this.isDataviewInstalled = true;
    } catch (error) {
      throw new DataviewNotInstalledError();
    }
  }
  isDataviewInitialized() {
    return this._api.index.initialized;
  }
  pages(query) {
    return __async(this, null, function* () {
      return yield this.invokeAndReinitDvCacheOnError(() => this._api.pages(query));
    });
  }
  page(filepath) {
    return __async(this, null, function* () {
      return yield this.invokeAndReinitDvCacheOnError(() => this._api.page(filepath));
    });
  }
  validate(query) {
    return __async(this, null, function* () {
      const result = yield this.invokeAndReinitDvCacheOnError(() => this._api.query(`LIST FROM ${query}`));
      return result.successful;
    });
  }
  getMetadataFieldValue(filepath, fieldName) {
    return __async(this, null, function* () {
      const page = yield this.page(filepath);
      return page[fieldName];
    });
  }
  invokeAndReinitDvCacheOnError(func, ...args) {
    return __async(this, null, function* () {
      try {
        if (!this.isDataviewInstalled)
          throw new DataviewNotInstalledError();
        return func(args);
      } catch (error) {
        yield this._api.index.reinitialize();
        return func(args);
      }
    });
  }
};

// src/utils/dateUtils.ts
function getDateOffsetByNDays(days) {
  const today = new Date();
  const offsetDate = new Date();
  offsetDate.setDate(today.getDate() - days);
  return offsetDate;
}
function getNumberOfDaysFromToday(datestring) {
  const date = new Date(datestring);
  const today = new Date();
  const diff = today.getTime() - date.getTime();
  return Math.round(diff / (1e3 * 60 * 60 * 24));
}
function getTodayAsYyyyMmDd() {
  const date = new Date();
  const year = date.toLocaleString("default", { year: "numeric" });
  const month = date.toLocaleString("default", { month: "2-digit" });
  const day = date.toLocaleString("default", { day: "2-digit" });
  return [year, month, day].join("-");
}

// src/dataview/dataviewService.ts
var DataviewService = class {
  constructor() {
    this._dataviewApi = new DataviewFacade();
  }
  get isDataviewInitialized() {
    return this._dataviewApi.isDataviewInitialized();
  }
  getNoteSetFiles(noteSet) {
    return __async(this, null, function* () {
      const query = this.getOrCreateBaseDataviewQuery(noteSet);
      try {
        let pages = yield this._dataviewApi.pages(query);
        if (noteSet.createdInLastNDays) {
          pages = pages.where((p) => p.file.cday > getDateOffsetByNDays(noteSet.createdInLastNDays));
        }
        if (noteSet.modifiedInLastNDays) {
          pages = pages.where((p) => p.file.mday > getDateOffsetByNDays(noteSet.modifiedInLastNDays));
        }
        return pages;
      } catch (error) {
        if (error instanceof DataviewNotInstalledError) {
          throw error;
        } else {
          console.error(`Simple Note Review - dataview API error: ${error.message}`);
          throw new DataviewQueryError(`Error while trying to get next note in noteset "${query}" via Dataview API. Please check noteset settings and/or disabling and enabling Simple Note Review plugin again.`);
        }
      }
    });
  }
  getOrCreateBaseDataviewQuery(noteSet) {
    if (noteSet.dataviewQuery && noteSet.dataviewQuery != "")
      return noteSet.dataviewQuery;
    let tags = "";
    let folders = "";
    if (noteSet.tags) {
      tags = noteSet.tags.map((p) => {
        if (p[0] !== "#")
          return "#" + p;
        return p;
      }).join(` ${noteSet.tagsJoinType || "or"} `);
    }
    if (noteSet.folders) {
      folders = noteSet.folders.join(" or ");
    }
    if (tags && folders)
      return `(${tags}) ${noteSet.foldersToTagsJoinType || "or"} (${folders})`;
    if (tags)
      return tags;
    if (folders)
      return folders;
    return null;
  }
  validateQuery(query) {
    return this._dataviewApi.validate(query);
  }
  getPageFromPath(filepath) {
    return this._dataviewApi.page(filepath);
  }
  getMetadataFieldValue(filepath, fieldName) {
    return __async(this, null, function* () {
      return yield this._dataviewApi.getMetadataFieldValue(filepath, fieldName);
    });
  }
};

// src/noteSet/noteSetInfoService.ts
var NoteSetInfoService = class {
  constructor(_dataviewService) {
    this._dataviewService = _dataviewService;
  }
  updateNoteSetStats(noteSet) {
    return __async(this, null, function* () {
      const pages = yield this._dataviewService.getNoteSetFiles(noteSet);
      noteSet.stats = {
        totalCount: pages.length,
        notRewiewedCount: pages.where((p) => !p.reviewed).length,
        reviewedLastSevenDaysCount: pages.where((p) => p.reviewed > getDateOffsetByNDays(7)).length,
        reviewedLastThirtyDaysCount: pages.where((p) => p.reviewed > getDateOffsetByNDays(30)).length
      };
    });
  }
  updateNoteSetDisplayNameAndDescription(noteSet) {
    noteSet.displayName = this.getNoteSetDisplayName(noteSet);
    noteSet.description = this.getNoteSetDescription(noteSet);
  }
  getNoteSetDisplayName(noteSet) {
    if (noteSet.name && noteSet.name !== "") {
      return noteSet.name;
    }
    const alias = this._dataviewService.getOrCreateBaseDataviewQuery(noteSet);
    return alias && alias != "" ? alias : "blank note set";
  }
  getNoteSetDescription(noteSet) {
    var _a, _b, _c;
    if (this.queryMatchesAllNotes(noteSet)) {
      return NoteSetService.MATCHES_ALL_STRING;
    }
    const desc = [];
    if (noteSet.dataviewQuery && noteSet.dataviewQuery !== "") {
      desc.push(`are matched with dataviewJS query ${noteSet.dataviewQuery}; `);
    }
    if (noteSet.tags && ((_a = noteSet.tags) == null ? void 0 : _a.length) > 0) {
      let tagString = `contain ${noteSet.tagsJoinType === "and" /* AND */ ? "all" : "any"} of these tags: ${noteSet.tags.join(", ")}`;
      if (noteSet.folders && ((_b = noteSet.folders) == null ? void 0 : _b.length) > 0) {
        tagString += ` ${noteSet.foldersToTagsJoinType === "and" /* AND */ ? "and" : "or"} `;
      }
      desc.push(tagString);
    }
    if (noteSet.folders && ((_c = noteSet.folders) == null ? void 0 : _c.length) > 0) {
      desc.push(`are inside any of these folders (including nested folders): ${noteSet.folders.join(", ")}`);
    }
    if (noteSet.createdInLastNDays) {
      desc.push(`are created in the last ${noteSet.createdInLastNDays} days`);
    }
    if (noteSet.modifiedInLastNDays) {
      desc.push(`are modified in the last ${noteSet.modifiedInLastNDays} days`);
    }
    return `matches notes that:  ` + desc.join("; ");
  }
  queryMatchesAllNotes(noteset) {
    return !(this._dataviewService.getOrCreateBaseDataviewQuery(noteset) || noteset.createdInLastNDays || noteset.createdInLastNDays);
  }
};

// src/noteSet/noteSetService.ts
var NoteSetEmptyError = class extends Error {
  constructor() {
    super(...arguments);
    this.message = "Could not get the next note in note set. Please check note set settings and make sure it has notes.";
  }
};
var DataviewQueryError = class extends Error {
};
var NoteSetService = class {
  constructor(_app, _plugin) {
    this._app = _app;
    this._plugin = _plugin;
    this._dataviewService = new DataviewService();
    this._noteSetInfoService = new NoteSetInfoService(this._dataviewService);
  }
  getNoteSet(noteSetId) {
    const notesets = this._plugin.settings.noteSets.filter((x) => x.id === noteSetId);
    if (notesets.length === 0) {
      throw new Error(`Noteset not found`);
    }
    return notesets[0];
  }
  saveNoteSet(noteSet) {
    return __async(this, null, function* () {
      if (!noteSet.id) {
        noteSet.id = crypto.randomUUID();
      }
      this._plugin.settings.noteSets = this._plugin.settings.noteSets.filter((x) => x.id !== noteSet.id);
      this._plugin.settings.noteSets.push(noteSet);
      this._plugin.saveSettings();
    });
  }
  deleteNoteSet(noteSet) {
    return __async(this, null, function* () {
      this._plugin.settings.noteSets = this._plugin.settings.noteSets.filter((q) => q.id !== noteSet.id);
      yield this._plugin.saveSettings();
    });
  }
  addEmptyNoteSet() {
    return __async(this, null, function* () {
      const emptyNoteSet = new EmptyNoteSet();
      this.saveNoteSet(emptyNoteSet);
    });
  }
  updateNoteSetDisplayNames() {
    this._plugin.settings.noteSets.forEach((q) => this.updateNoteSetDisplayNameAndDescription(q));
  }
  updateNoteSetDisplayNameAndDescription(noteSet) {
    this._noteSetInfoService.updateNoteSetDisplayNameAndDescription(noteSet);
  }
  sortNoteSets(noteSets) {
    const maxSortOrder = noteSets.reduce((max, note) => {
      if (note.sortOrder !== void 0 && note.sortOrder > max) {
        return note.sortOrder;
      }
      return max;
    }, 0);
    let nextSortOrder = maxSortOrder + 1;
    const filledNotes = noteSets.map((noteSet) => __spreadProps(__spreadValues({}, noteSet), {
      sortOrder: noteSet.sortOrder !== void 0 ? noteSet.sortOrder : nextSortOrder++
    }));
    filledNotes.sort((a, b) => a.sortOrder - b.sortOrder);
    return filledNotes;
  }
  updateNoteSetStats(noteSet) {
    return __async(this, null, function* () {
      yield this._noteSetInfoService.updateNoteSetStats(noteSet);
    });
  }
  validateAllNotesets() {
    return __async(this, null, function* () {
      yield Promise.all(this._plugin.settings.noteSets.map((noteset) => this.validateRulesAndSave(noteset)));
    });
  }
  validateRulesAndSave(noteSet) {
    return __async(this, null, function* () {
      const validationErrors = yield this.getValidationErrors(noteSet);
      noteSet.validationErrors = validationErrors;
      yield this.saveNoteSet(noteSet);
    });
  }
  onPhysicalDeleteNote(note) {
    return __async(this, null, function* () {
      this._plugin.settings.noteSets.forEach((x) => x.queue.filenames.remove(note.path));
      this._plugin.saveSettings();
    });
  }
  getValidationErrors(noteset) {
    return __async(this, null, function* () {
      var _a, _b;
      const errors = [];
      if (!((_b = (_a = noteset.queue) == null ? void 0 : _a.filenames) == null ? void 0 : _b.length))
        errors.push("Noteset review queue is empty. If this seems wrong, try resetting queue and/or checking noteset rules." /* QueueEmpty */);
      const customDvQueryIsValid = !noteset.dataviewQuery || (yield this._dataviewService.validateQuery(noteset.dataviewQuery));
      if (!customDvQueryIsValid)
        errors.push("Custom DataviewJS query is incorrect. Please check noteset settings." /* CustomDataviewIncorrect */);
      const constructedDvQuery = this._dataviewService.getOrCreateBaseDataviewQuery(noteset);
      const constructedDvQueryIsValid = yield this._dataviewService.validateQuery(constructedDvQuery);
      if (!constructedDvQueryIsValid)
        errors.push("Noteset rules are incorrect. Please check noteset settings." /* RulesAreIncorrect */);
      if (this._dataviewService.isDataviewInitialized) {
        const queueActual = yield this._dataviewService.getNoteSetFiles(noteset);
        if (!(queueActual == null ? void 0 : queueActual.length) || queueActual.length === 0) {
          errors.push("Noteset rules do not match any notes." /* RulesDoNotMatchAnyNotes */);
        }
      }
      return errors;
    });
  }
};
NoteSetService.MATCHES_ALL_STRING = "matches all notes";

// src/UI/selectNoteSetModal.ts
var import_obsidian = require("obsidian");
var SelectNoteSetModal = class extends import_obsidian.SuggestModal {
  constructor(_app, _plugin) {
    super(_app);
    this._app = _app;
    this._plugin = _plugin;
  }
  getSuggestions(query) {
    this.setPlaceholder("Select a note set to start reviewing notes");
    return this._plugin.settings.noteSets.filter((q) => {
      if (query === "") {
        return true;
      }
      const name = q.displayName;
      if (!name || name === "") {
        return false;
      }
      return name.toLowerCase().includes(query.toLowerCase());
    });
  }
  renderSuggestion(noteSet, el) {
    el.createDiv({ text: noteSet.displayName });
    el.createEl("small", { text: noteSet.description }).style.opacity = "60%";
  }
  onChooseSuggestion(noteSet, evt) {
    return __async(this, null, function* () {
      var _a;
      try {
        yield this._plugin.reviewService.startReview(noteSet.id);
        this._plugin.settings.currentNoteSetId = noteSet.id;
        this._plugin.showNotice(`Set current note set to ${noteSet.displayName}.`);
        this._plugin.saveSettings();
      } catch (error) {
        if (error instanceof NoteSetEmptyError) {
          this._plugin.showNotice(`note set ${(_a = noteSet.displayName) != null ? _a : noteSet.name} is empty.`);
        }
        throw error;
      }
    });
  }
};

// src/settings/pluginSettings.ts
var DefaultSettings = class {
  constructor() {
    this.reviewedFieldName = "reviewed";
    this.reviewFrequencyFieldName = "review-frequency";
    this.noteSets = [];
    this.currentNoteSetId = null;
    this.openNextNoteAfterReviewing = true;
    this.openRandomNote = false;
    this.useReviewFrequency = false;
    this.unreviewedNotesFirst = false;
  }
};

// src/UI/settingsTab.ts
var import_obsidian5 = require("obsidian");

// src/UI/noteset/noteSetDeleteModal.ts
var import_obsidian2 = require("obsidian");
var NoteSetDeleteModal = class extends import_obsidian2.Modal {
  constructor(app2, settingsTab, noteSet, service) {
    super(app2);
    this.settingsTab = settingsTab;
    this.noteSet = noteSet;
    this.service = service;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("note-set-delete-modal");
    contentEl.setText(`Delete note set "${this.noteSet.displayName}" ?`);
    const btnsDiv = contentEl.createDiv();
    const okBtn = btnsDiv.createEl("button", { text: "Ok" });
    okBtn.onClickEvent(() => __async(this, null, function* () {
      yield this.service.deleteNoteSet(this.noteSet);
      this.settingsTab.refresh();
      this.close();
    }));
    const cancelBtn = btnsDiv.createEl("button", { text: "Cancel" });
    cancelBtn.onClickEvent(() => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/UI/noteset/noteSetInfoModal.ts
var import_obsidian3 = require("obsidian");
var NoteSetInfoModal = class extends import_obsidian3.Modal {
  constructor(app2, noteSet, service) {
    super(app2);
    this.noteSet = noteSet;
    this.service = service;
  }
  onOpen() {
    return __async(this, null, function* () {
      this.service.updateNoteSetDisplayNameAndDescription(this.noteSet);
      yield this.service.updateNoteSetStats(this.noteSet);
      const { contentEl } = this;
      contentEl.createEl("h3", { text: `Note set "${this.noteSet.displayName}"` });
      contentEl.createDiv({ text: `This query ${this.noteSet.description}.` });
      contentEl.createEl("br");
      let tableEl = contentEl.createEl("table");
      let tbodyEl = tableEl.createEl("tbody");
      this.addTableRow(tbodyEl, "Total notes", this.noteSet.stats.totalCount);
      this.addTableRow(tbodyEl, "Reviewed in last 7 days", this.noteSet.stats.reviewedLastSevenDaysCount);
      this.addTableRow(tbodyEl, "Reviewed in last 30 days", this.noteSet.stats.reviewedLastThirtyDaysCount);
      this.addTableRow(tbodyEl, "Not reviewed yet", this.noteSet.stats.notRewiewedCount);
    });
  }
  addTableRow(tbodyEl, name, value) {
    let valueStr = typeof value === "number" ? value.toString() : value;
    let rowEl = tbodyEl.createEl("tr");
    let nameRow = rowEl.createEl("td");
    nameRow.setText(name);
    nameRow.style.paddingRight = "1rem";
    rowEl.createEl("td").setText(valueStr);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/UI/noteset/noteSetEditModal.ts
var import_obsidian4 = require("obsidian");
var NoteSetEditModal = class extends import_obsidian4.Modal {
  constructor(_noteSet, _plugin) {
    super(app);
    this._noteSet = _noteSet;
    this._plugin = _plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: `Note set "${this._noteSet.displayName}"` });
    const nameSetting = new import_obsidian4.Setting(contentEl);
    nameSetting.setName("Name");
    nameSetting.setDesc("If omitted, the name will be created from tags, folders, or dataviewJS query (if these are set).");
    nameSetting.addText((textField) => {
      textField.setValue(this._noteSet.name).setPlaceholder(this._noteSet.displayName).onChange((value) => {
        if (value === this._noteSet.name) {
          return;
        }
        this._noteSet.name = value != "" ? value : null;
        if (value == "") {
          textField.setPlaceholder(this._noteSet.displayName);
        }
      });
    });
    const tagsSetting = new import_obsidian4.Setting(contentEl);
    tagsSetting.setName("Tags");
    tagsSetting.setDesc(`One or more tags, separated by comma. Note set will contain notes tagged with ${this._noteSet.tagsJoinType === "and" /* AND */ ? "all" : "any"} of these. Example: #review, #knowledge`);
    tagsSetting.addTextArea((textArea) => {
      textArea.setValue(this._noteSet.tags ? this._noteSet.tags.join(",") : "").setPlaceholder("Tags").onChange((value) => {
        this._noteSet.tags = value != "" ? value.split(",").map((f) => f.trim()) : [];
      });
    });
    const foldersSetting = new import_obsidian4.Setting(contentEl);
    foldersSetting.setName("Folders");
    foldersSetting.setDesc(`One or more folder paths relative to vault root, surrounded by quotes and separated by comma. Note set will contain notes located in any of these. Top-level folders must not contain slash in their path.  Example: "notes", "notes/programming"`);
    foldersSetting.addTextArea((textArea) => {
      textArea.setValue(this._noteSet.folders ? this._noteSet.folders.join(",") : "").setPlaceholder("Folders").onChange((value) => {
        this._noteSet.folders = value != "" ? value.split(",").map((f) => f.trim()) : [];
      });
    });
    const createdDateSetting = new import_obsidian4.Setting(contentEl);
    createdDateSetting.setName("Created in last N days");
    createdDateSetting.setDesc(`Number of days`);
    createdDateSetting.addText((text) => {
      text.inputEl.type = "number";
      text.setValue(`${this._noteSet.createdInLastNDays}`);
      text.onChange((val) => __async(this, null, function* () {
        this._noteSet.createdInLastNDays = parseInt(val);
      }));
    });
    const modifiedDateSetting = new import_obsidian4.Setting(contentEl);
    modifiedDateSetting.setName("Modified in last N days");
    modifiedDateSetting.setDesc(`Number of days`);
    modifiedDateSetting.addText((text) => {
      text.inputEl.type = "number";
      text.setValue(`${this._noteSet.modifiedInLastNDays}`);
      text.onChange((val) => __async(this, null, function* () {
        this._noteSet.modifiedInLastNDays = parseInt(val);
      }));
    });
    const advancedSectionHeader = new import_obsidian4.Setting(contentEl);
    advancedSectionHeader.setHeading();
    advancedSectionHeader.setName("Advanced Settings");
    const advancedSectionBodyEl = contentEl.createDiv({ cls: ["setting-body-advanced", "is-collapsed"] });
    const tagJoinTypeSetting = new import_obsidian4.Setting(advancedSectionBodyEl);
    tagJoinTypeSetting.setName("If tags are specified, match notes with:");
    tagJoinTypeSetting.addDropdown((dropdown) => {
      dropdown.addOption("or" /* OR */, "any of the tags").addOption("and" /* AND */, "all of the tags").setValue(this._noteSet.tagsJoinType || "or" /* OR */).onChange((value) => {
        this._noteSet.tagsJoinType = value;
      });
    });
    const folderTagJoinTypeSetting = new import_obsidian4.Setting(advancedSectionBodyEl);
    folderTagJoinTypeSetting.setName("If folders *and* tags are specified, match notes with: ");
    folderTagJoinTypeSetting.addDropdown((dropdown) => {
      dropdown.addOption("or" /* OR */, "specified tags OR in these folders").addOption("and" /* AND */, "specified tags AND in these folders").setValue(this._noteSet.foldersToTagsJoinType || "or" /* OR */).onChange((value) => {
        this._noteSet.foldersToTagsJoinType = value;
      });
    });
    const dataviewQuerySetting = new import_obsidian4.Setting(advancedSectionBodyEl);
    dataviewQuerySetting.setName("DataviewJS query");
    dataviewQuerySetting.setDesc(`DataviewJS-style query for more flexible control over the note set. If used, *overrides* Tags & Folders. Example: "(#knowledge and #review) or ('./notes')"`);
    dataviewQuerySetting.addTextArea((textArea) => {
      textArea.setValue(this._noteSet.dataviewQuery).setPlaceholder("DataviewJS query").onChange((value) => {
        this._noteSet.dataviewQuery = value;
        updateTagsFoldersSettingsAvailability(value);
      });
    });
    const saveBtn = new import_obsidian4.ButtonComponent(contentEl);
    saveBtn.setButtonText("Save");
    saveBtn.onClick(() => __async(this, null, function* () {
      return yield this.save();
    }));
    const updateTagsFoldersSettingsAvailability = (dataviewJsQueryValue) => {
      const disableTagsFoldersSettings = dataviewJsQueryValue && dataviewJsQueryValue != "";
      if (disableTagsFoldersSettings) {
        tagsSetting.settingEl.style.opacity = "50%";
        foldersSetting.settingEl.style.opacity = "50%";
      } else {
        tagsSetting.settingEl.style.opacity = "100%";
        foldersSetting.settingEl.style.opacity = "100%";
      }
      tagsSetting.setDisabled(disableTagsFoldersSettings);
      foldersSetting.setDisabled(disableTagsFoldersSettings);
    };
    updateTagsFoldersSettingsAvailability(this._noteSet.dataviewQuery);
  }
  save() {
    return __async(this, null, function* () {
      this._plugin.settings.noteSets.forEach((noteSet, index) => {
        if (noteSet.id === this._noteSet.id) {
          this._plugin.settings.noteSets[index] = this._noteSet;
        }
      });
      this._plugin.noteSetService.validateRulesAndSave(this._noteSet);
      this._plugin.reviewService.resetNotesetQueueWithValidation(this._noteSet.id);
      this._plugin.noteSetService.updateNoteSetDisplayNameAndDescription(this._noteSet);
      this._plugin.noteSetService.updateNoteSetStats(this._noteSet);
      yield this._plugin.saveSettings();
      yield this._plugin.activateView();
      this._plugin.showNotice(`Saved note set "${this._noteSet.displayName}".`);
      this.close();
    });
  }
};

// src/UI/settingsTab.ts
var SimpleNoteReviewPluginSettingsTab = class extends import_obsidian5.PluginSettingTab {
  constructor(_plugin, app2) {
    super(app2, _plugin);
    this._plugin = _plugin;
  }
  refresh() {
    this.display();
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Simple Note Review Settings" });
    new import_obsidian5.Setting(containerEl).setName("Open next note in the note set after reviewing a note").setDesc("After marking note as reviewed, automatically open next note in the note set.").addToggle((toggle) => {
      toggle.setValue(this._plugin.settings.openNextNoteAfterReviewing).onChange((value) => {
        this._plugin.settings.openNextNoteAfterReviewing = value;
        this._plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName("Use review frequency").setDesc("Set review frequency level (high, normal, low, ignore) for each note. Notes with higher review frequency will be presented for review more often. Default is 'normal'.").addToggle((toggle) => {
      toggle.setValue(this._plugin.settings.useReviewFrequency).onChange((value) => {
        this._plugin.settings.useReviewFrequency = value;
        this._plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName("Start with unreviewed notes").setDesc("Start review with notes that have no review date. If turned off, notes without the review date will have lower priority than notes with early review dates.").addToggle((toggle) => {
      toggle.setValue(this._plugin.settings.unreviewedNotesFirst).onChange((value) => {
        this._plugin.settings.unreviewedNotesFirst = value;
        this._plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "Note Sets" });
    this._plugin.settings && this._plugin.settings.noteSets && this._plugin.settings.noteSets.forEach((noteSet, index) => {
      var _a;
      this._plugin.noteSetService.updateNoteSetDisplayNameAndDescription(noteSet);
      const setting = new import_obsidian5.Setting(containerEl);
      setting.setName(`Note Set "${noteSet.displayName}"`);
      const updateHeader = (text) => {
        setting.setName(`Note Set "${text}"`);
      };
      updateHeader(noteSet.displayName);
      if (((_a = noteSet == null ? void 0 : noteSet.validationErrors) == null ? void 0 : _a.length) > 0) {
        setting.addExtraButton((cb) => {
          cb.setIcon("alert-triangle").setTooltip(noteSet == null ? void 0 : noteSet.validationErrors.join(";\n"));
        });
      }
      setting.addExtraButton((cb) => {
        cb.setIcon("info").setTooltip("Note set info & stats").onClick(() => {
          new NoteSetInfoModal(this.app, noteSet, this._plugin.noteSetService).open();
        });
      });
      setting.addExtraButton((cb) => {
        cb.setIcon("rotate-cw").setTooltip("Reset review queue and update stats for this note set").onClick(() => __async(this, null, function* () {
          yield this._plugin.noteSetService.validateRulesAndSave(noteSet);
          yield this._plugin.reviewService.resetNotesetQueueWithValidation(noteSet.id);
          yield this._plugin.noteSetService.updateNoteSetStats(noteSet);
          this.display();
        }));
      });
      setting.addExtraButton((cb) => {
        cb.setIcon("arrow-up").setTooltip("Move element up").setDisabled(index === 0).onClick(() => {
          if (index > 0) {
            const temp = this._plugin.settings.noteSets[index - 1].sortOrder;
            this._plugin.settings.noteSets[index - 1].sortOrder = noteSet.sortOrder;
            noteSet.sortOrder = temp;
            this._plugin.saveSettings();
            this.display();
          }
        });
      });
      setting.addExtraButton((cb) => {
        cb.setIcon("arrow-down").setTooltip("Move element down").setDisabled(index >= this._plugin.settings.noteSets.length - 1).onClick(() => {
          if (index < this._plugin.settings.noteSets.length - 1) {
            const temp = this._plugin.settings.noteSets[index + 1].sortOrder;
            this._plugin.settings.noteSets[index + 1].sortOrder = noteSet.sortOrder;
            noteSet.sortOrder = temp;
            this._plugin.saveSettings();
            this.display();
          }
        });
      });
      setting.addExtraButton((cb) => {
        cb.setIcon("edit").setTooltip("Edit Note set").onClick(() => {
          const modal = new NoteSetEditModal(noteSet, this._plugin);
          modal.open();
          modal.onClose = () => {
            this.refresh();
          };
        });
      });
      setting.addExtraButton((cb) => {
        cb.setIcon("trash").setTooltip("Delete note set").onClick(() => __async(this, null, function* () {
          new NoteSetDeleteModal(this.app, this, noteSet, this._plugin.noteSetService).open();
        }));
      });
    });
    new import_obsidian5.Setting(containerEl).addButton((btn) => {
      btn.setButtonText("Add Note Set");
      btn.onClick(() => __async(this, null, function* () {
        yield this._plugin.noteSetService.addEmptyNoteSet();
        this.refresh();
      }));
    });
  }
};

// src/UI/sidebar/sidebarView.ts
var import_obsidian6 = require("obsidian");
var _SimpleNoteReviewSidebarView = class extends import_obsidian6.ItemView {
  constructor(leaf, _plugin) {
    super(leaf);
    this._plugin = _plugin;
  }
  onOpen() {
    return __async(this, null, function* () {
      yield this.renderView();
    });
  }
  onClose() {
    return __async(this, null, function* () {
    });
  }
  renderView() {
    return __async(this, null, function* () {
      this.contentEl.empty();
      this.createGeneralActionsEl(this.contentEl);
      this.createCurrentFileActionsEl(this.contentEl);
      this.contentEl.createEl("h4", { text: "Note Sets" });
      this._plugin.settings.noteSets.forEach((noteSet) => {
        this.createNotesetSection(noteSet);
      });
    });
  }
  createGeneralActionsEl(parentEl) {
    const actionsEl = new import_obsidian6.Setting(parentEl);
    actionsEl.setDesc("general actions:");
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("refresh-cw").setTooltip("refresh sidebar").onClick(() => __async(this, null, function* () {
        yield this.onOpen();
      }));
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("settings").setTooltip("open plugin settings").onClick(() => {
        this.app.setting.open();
        this.app.setting.openTabById("simple-note-review");
      });
    });
    return actionsEl.settingEl;
  }
  createCurrentFileActionsEl(parentEl) {
    const actionsEl = new import_obsidian6.Setting(parentEl);
    actionsEl.setDesc("current file actions:");
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("ban").setTooltip("ignore this note in all reviews").onClick(() => {
        this._plugin.fileService.setReviewFrequency(this.app.workspace.getActiveFile(), "ignore" /* ignore */);
      });
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("signal-low").setTooltip("set review frequency to low").onClick(() => {
        this._plugin.fileService.setReviewFrequency(this.app.workspace.getActiveFile(), "low" /* low */);
      });
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("signal-medium").setTooltip("set review frequency to normal").onClick(() => {
        this._plugin.fileService.setReviewFrequency(this.app.workspace.getActiveFile(), "normal" /* normal */);
      });
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("signal").setTooltip("set review frequency to high").onClick(() => {
        this._plugin.fileService.setReviewFrequency(this.app.workspace.getActiveFile(), "high" /* high */);
      });
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("skip-forward").setTooltip("skip note for current review").onClick(() => {
        this._plugin.reviewService.skipNote(this.app.workspace.getActiveFile(), this._plugin.settings.currentNoteSetId);
      });
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("file-check").setTooltip("mark current note as reviewed & go to the next file").onClick(() => {
        this._plugin.reviewService.reviewNote(this.app.workspace.getActiveFile(), this._plugin.settings.currentNoteSetId);
      });
    });
    return actionsEl.settingEl;
  }
  createNotesetSection(noteSet) {
    var _a;
    const section = new import_obsidian6.Setting(this.contentEl);
    const trimmedName = noteSet.displayName.length > 20 ? noteSet.displayName.substring(0, 20) + "..." : noteSet.displayName;
    section.setName(trimmedName);
    if (this._plugin.settings.currentNoteSetId && this._plugin.settings.currentNoteSetId === noteSet.id) {
      section.setDesc("current note set");
    } else {
      section.setDesc("");
    }
    if (((_a = noteSet == null ? void 0 : noteSet.validationErrors) == null ? void 0 : _a.length) > 0) {
      section.addExtraButton((cb) => {
        cb.setIcon("alert-triangle").setTooltip(noteSet == null ? void 0 : noteSet.validationErrors.join(";\n"));
      });
    }
    section.addExtraButton((cb) => {
      cb.setIcon("info").setTooltip("view note set info & stats").onClick(() => {
        new NoteSetInfoModal(this.app, noteSet, this._plugin.noteSetService).open();
      });
    });
    section.addExtraButton((cb) => {
      cb.setIcon("dices").setTooltip("open random note from this note set").onClick(() => __async(this, null, function* () {
        return this.startReviewWithDelegate(noteSet.id, this._plugin.reviewService.openRandomNoteInQueue);
      }));
    });
    section.addExtraButton((cb) => {
      cb.setIcon("rotate-cw").setTooltip("reset review queue for this note set").onClick(() => __async(this, null, function* () {
        yield this._plugin.noteSetService.validateRulesAndSave(noteSet);
        yield this._plugin.reviewService.resetNotesetQueueWithValidation(noteSet.id);
        yield this.renderView();
      }));
    });
    section.addExtraButton((cb) => {
      cb.setIcon("play").setTooltip("review this note set").onClick(() => __async(this, null, function* () {
        return this.startReviewWithDelegate(noteSet.id, this._plugin.reviewService.startReview);
      }));
    });
    return section.settingEl;
  }
  getViewType() {
    return _SimpleNoteReviewSidebarView.VIEW_TYPE;
  }
  getDisplayText() {
    return _SimpleNoteReviewSidebarView.DISPLAY_TEXT;
  }
  getIcon() {
    return _SimpleNoteReviewSidebarView.SNR_ICON_NAME;
  }
  startReviewWithDelegate(noteSetId, delegate) {
    return __async(this, null, function* () {
      var _a;
      const noteSet = this._plugin.noteSetService.getNoteSet(noteSetId);
      try {
        yield delegate.bind(this._plugin.reviewService)(noteSetId);
      } catch (error) {
        const noteSet2 = this._plugin.noteSetService.getNoteSet(noteSetId);
        if (error instanceof NoteSetEmptyError) {
          this._plugin.showNotice(`note set ${(_a = noteSet2.displayName) != null ? _a : noteSet2.name} is empty.`);
        }
        throw error;
      }
      if (this._plugin.settings.currentNoteSetId !== noteSet.id) {
        this._plugin.settings.currentNoteSetId = noteSet.id;
        yield this._plugin.saveSettings();
        this._plugin.showNotice(`Set current note set to ${noteSet.displayName}.`);
      }
      this._plugin.activateView();
    });
  }
};
var SimpleNoteReviewSidebarView = _SimpleNoteReviewSidebarView;
SimpleNoteReviewSidebarView.VIEW_TYPE = "simple-note-review-sidebar-view";
SimpleNoteReviewSidebarView.DISPLAY_TEXT = "Simple Note Review";
SimpleNoteReviewSidebarView.SNR_ICON_NAME = "glasses";

// src/notes/fileService.ts
var import_obsidian7 = require("obsidian");

// src/utils/metadataService.ts
var FRONTMATTER_REGEX = /^---\r?\n((?:.*\r?\n)*?)---/;
var FIELDS_REGEX_PART = "((?:.*\n)*)";
var MetadataService = class {
  constructor(app2) {
    this.app = app2;
  }
  setAndSaveMetadataFieldsValue(file = null, fields) {
    return __async(this, null, function* () {
      const fileContent = yield app.vault.read(file);
      let newFileContent = fileContent;
      for (const field of fields) {
        newFileContent = this.setMetadataFieldValue(newFileContent, field);
      }
      yield this.app.vault.modify(file, newFileContent);
    });
  }
  setAndSaveMetadataFieldValue(file = null, field) {
    return __async(this, null, function* () {
      this.setAndSaveMetadataFieldsValue(file, [field]);
    });
  }
  setMetadataFieldValue(fileContent, data) {
    const fieldText = `${data.name}: ${data.value}
`;
    let newFileContent;
    const fieldRegex = this.createFieldRegex(data.name);
    if (fieldRegex.test(fileContent)) {
      const result = fieldRegex.exec(fileContent);
      const partBefore = result[1];
      const partAfter = result[3];
      newFileContent = fileContent.replace(fieldRegex, `---
${partBefore}${fieldText}${partAfter}---`);
    } else if (FRONTMATTER_REGEX.test(fileContent)) {
      const metadata = FRONTMATTER_REGEX.exec(fileContent);
      const partBefore = metadata[1];
      newFileContent = fileContent.replace(FRONTMATTER_REGEX, `---
${partBefore}${fieldText}---`);
    } else {
      newFileContent = `---
${fieldText}---

${fileContent}`;
    }
    return newFileContent;
  }
  createSingleFieldRegexString(fieldName) {
    return `(${fieldName}s*:s*.*
)`;
  }
  createFieldRegex(fieldName) {
    return new RegExp(`---
(?:${FIELDS_REGEX_PART}${this.createSingleFieldRegexString(fieldName)}${FIELDS_REGEX_PART})---`);
  }
};

// src/notes/fileService.ts
var FileService = class {
  constructor(_app, _plugin) {
    this._app = _app;
    this._plugin = _plugin;
    this._dataviewService = new DataviewService();
    this._metadataService = new MetadataService(this._app);
  }
  setReviewFrequency(note, frequency) {
    return __async(this, null, function* () {
      if (!(note instanceof import_obsidian7.TFile))
        return;
      try {
        yield this._metadataService.setAndSaveMetadataFieldValue(note, {
          name: this._plugin.settings.reviewFrequencyFieldName,
          value: frequency
        });
      } catch (error) {
        this._plugin.showNotice(error.message);
        throw error;
      }
    });
  }
  setReviewedToToday(file) {
    return __async(this, null, function* () {
      const todayString = getTodayAsYyyyMmDd();
      const fieldsToSet = [{
        name: this._plugin.settings.reviewedFieldName,
        value: todayString
      }];
      if (this._plugin.settings.useReviewFrequency) {
        const reviewFrequency = yield this.getReviewFrequency(file);
        fieldsToSet.push({
          name: this._plugin.settings.reviewFrequencyFieldName,
          value: reviewFrequency != null ? reviewFrequency : "normal" /* normal */
        });
      }
      yield this._metadataService.setAndSaveMetadataFieldsValue(file, fieldsToSet);
      this._plugin.showNotice(`Marked note "${file.path}" as reviewed today.`);
    });
  }
  getReviewFrequency(file) {
    return __async(this, null, function* () {
      const frequencyValue = yield this._dataviewService.getMetadataFieldValue(file.path, this._plugin.settings.reviewFrequencyFieldName);
      switch (frequencyValue) {
        case "high" /* high */:
          return "high" /* high */;
        case "normal" /* normal */:
          return "normal" /* normal */;
        case "low" /* low */:
          return "low" /* low */;
        case "ignore" /* ignore */:
          return "ignore" /* ignore */;
        default:
          return null;
      }
    });
  }
};

// src/queues/reviewService.ts
var import_obsidian8 = require("obsidian");

// src/queues/noteQueue.ts
var NoteQueue = class {
  constructor(filePaths) {
    this.filenames = filePaths;
  }
};

// src/noteSet/noteReviewPriorityHelpers.ts
function calculateNoteReviewPriority(plugin, note) {
  const reviewedFieldName = plugin.settings.reviewedFieldName;
  const frequencyFieldName = plugin.settings.reviewFrequencyFieldName;
  let score = 0;
  switch (note[frequencyFieldName]) {
    case "high" /* high */:
      score = 5;
      break;
    case null:
    case "":
    case void 0:
      score = 4;
      break;
    case "normal" /* normal */:
      score = 3;
      break;
    case "low" /* low */:
      score = 2;
      break;
    case "ignore" /* ignore */:
      score = 0;
      return score;
    default:
      throw new Error("Review Frequency error!");
  }
  let multiplier = 1;
  if (note[reviewedFieldName] == null || note[reviewedFieldName] == "" || note[reviewedFieldName] == void 0)
    multiplier = plugin.settings.unreviewedNotesFirst ? 1e4 : 300;
  else
    multiplier = getNumberOfDaysFromToday(note[reviewedFieldName]);
  return score ** 2 * multiplier;
}

// src/queues/reviewService.ts
var ReviewService = class {
  constructor(_app, _plugin) {
    this._app = _app;
    this._plugin = _plugin;
    this._dataviewService = new DataviewService();
  }
  startReview(noteSetId) {
    return __async(this, null, function* () {
      const noteset = this._plugin.noteSetService.getNoteSet(noteSetId);
      yield this.createNotesetQueueIfNotExists(noteset);
      yield this.openNextNoteInQueue(noteset);
    });
  }
  resetNotesetQueueWithValidation(noteSetId) {
    return __async(this, null, function* () {
      const noteset = this._plugin.noteSetService.getNoteSet(noteSetId);
      yield this.createNotesetQueueWithValidation(noteset);
    });
  }
  reviewNote(note, noteSetId) {
    return __async(this, null, function* () {
      if (!(note instanceof import_obsidian8.TFile))
        return;
      const noteSet = this._plugin.noteSetService.getNoteSet(noteSetId);
      try {
        this._plugin.fileService.setReviewedToToday(note);
        this.removeNoteFromQueue(note, noteSet);
      } catch (error) {
        this._plugin.showNotice(error.message);
      }
      if (this._plugin.settings.openNextNoteAfterReviewing) {
        yield this.openNextNoteInQueue(noteSet);
      }
    });
  }
  openRandomNoteInQueue(noteSetId) {
    return __async(this, null, function* () {
      const noteSet = this._plugin.noteSetService.getNoteSet(noteSetId);
      yield this.createNotesetQueueIfNotExists(noteSet);
      const randomIndex = Math.floor(Math.random() * noteSet.queue.filenames.length);
      const filePath = noteSet.queue.filenames[randomIndex];
      const abstractFile = this._app.vault.getAbstractFileByPath(filePath);
      yield this._app.workspace.getMostRecentLeaf().openFile(abstractFile);
    });
  }
  skipNote(note, noteSetId) {
    return __async(this, null, function* () {
      const noteSet = this._plugin.noteSetService.getNoteSet(noteSetId);
      this.removeNoteFromQueue(note, noteSet);
      yield this.openNextNoteInQueue(noteSet);
    });
  }
  removeNoteFromQueue(note, noteSet) {
    return __async(this, null, function* () {
      noteSet.queue.filenames.remove(note.path);
      yield this._plugin.noteSetService.saveNoteSet(noteSet);
    });
  }
  openNextNoteInQueue(noteSet) {
    return __async(this, null, function* () {
      var _a, _b;
      const errorMsgBase = `Error opening next note in note set ${noteSet.displayName}: 
`;
      if (!((_b = (_a = noteSet.queue) == null ? void 0 : _a.filenames) == null ? void 0 : _b.length)) {
        this._plugin.showNotice(errorMsgBase + "review queue is empty. Check note set in plugin settings.");
        return;
      }
      const filePath = noteSet.queue.filenames[0];
      const abstractFile = this._app.vault.getAbstractFileByPath(filePath);
      if (!abstractFile || !(abstractFile instanceof import_obsidian8.TFile)) {
        this._plugin.showNotice(errorMsgBase + `could not get the note file with path "${filePath}" from Obsidian.`);
        return;
      }
      const leaf = this._app.workspace.getMostRecentLeaf();
      if (!leaf) {
        this._plugin.showNotice(errorMsgBase + "could not get a leaf from Obsidian.");
        return;
      }
      yield leaf.openFile(abstractFile);
    });
  }
  createNotesetQueueWithValidation(noteSet) {
    return __async(this, null, function* () {
      var _a;
      const files = yield this.generateNotesetQueue(noteSet);
      noteSet.queue = new NoteQueue(files);
      yield this._plugin.noteSetService.validateRulesAndSave(noteSet);
      if (((_a = noteSet == null ? void 0 : noteSet.validationErrors) == null ? void 0 : _a.length) > 0) {
        const errorsString = noteSet.validationErrors.join(";\n");
        this._plugin.showNotice(`Error while trying to create review queue for note set "${noteSet.displayName}":
 ${errorsString}`);
      }
    });
  }
  createNotesetQueueIfNotExists(noteSet) {
    return __async(this, null, function* () {
      var _a, _b;
      if (!noteSet.queue || !((_b = (_a = noteSet.queue) == null ? void 0 : _a.filenames) == null ? void 0 : _b.length) || noteSet.queue.filenames.length === 0) {
        yield this.createNotesetQueueWithValidation(noteSet);
      }
    });
  }
  generateNotesetQueue(noteSet) {
    return __async(this, null, function* () {
      const reviewedFieldName = this._plugin.settings.reviewedFieldName;
      const freqFieldname = this._plugin.settings.reviewFrequencyFieldName;
      const pages = (yield this._dataviewService.getNoteSetFiles(noteSet)).filter((x) => x[freqFieldname] !== "ignore" /* ignore */);
      let sorted;
      if (this._plugin.settings.useReviewFrequency) {
        sorted = pages.sort((x) => calculateNoteReviewPriority(this._plugin, x), "desc");
      } else {
        sorted = pages.sort((x) => x[reviewedFieldName], "asc");
      }
      if (sorted.length > 0) {
        return sorted.map((x) => x.file.path).array();
      }
      return [];
    });
  }
};

// main.ts
var SimpleNoteReviewPlugin = class extends import_obsidian9.Plugin {
  constructor() {
    super(...arguments);
    this.noteSetService = new NoteSetService(this.app, this);
    this.reviewService = new ReviewService(this.app, this);
    this.fileService = new FileService(this.app, this);
    this.openModalIconName = "glasses";
    this.markAsReviewedIconName = "checkmark";
  }
  onload() {
    return __async(this, null, function* () {
      this.app.workspace.onLayoutReady(() => {
        if (!this.dataviewIsInstalled()) {
          this.showNotice("Could not find Dataview plugin. To use Simple Note Review plugin, please install Dataview plugin first.");
        }
      });
      yield this.loadSettings();
      this.noteSetService.updateNoteSetDisplayNames();
      this.registerView(SimpleNoteReviewSidebarView.VIEW_TYPE, (leaf) => new SimpleNoteReviewSidebarView(leaf, this));
      this.addRibbonIcon(this.openModalIconName, "Simple Note Review: Open Sidebar View", (evt) => {
        this.activateView();
      });
      this.addRibbonIcon("play", "Simple Note Review: Continue Review of Current Note Set", (evt) => {
        this.reviewService.startReview(this.settings.currentNoteSetId);
      });
      this.addCommands();
      this.addSettingTab(new SimpleNoteReviewPluginSettingsTab(this, this.app));
      this.app.vault.on("delete", (file) => this.noteSetService.onPhysicalDeleteNote(file));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, new DefaultSettings(), yield this.loadData());
      this.settings.noteSets = this.noteSetService.sortNoteSets(this.settings.noteSets);
      yield this.noteSetService.validateAllNotesets();
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      this.settings.noteSets = this.noteSetService.sortNoteSets(this.settings.noteSets);
      yield this.saveData(this.settings);
    });
  }
  showNotice(message) {
    new import_obsidian9.Notice(message);
  }
  dataviewIsInstalled() {
    return !!(0, import_obsidian_dataview2.getAPI)();
  }
  addCommands() {
    this.addCommand({
      id: "start-review",
      name: "Start reviewing notes in current note set",
      callback: () => {
        this.reviewService.startReview(this.settings.currentNoteSetId);
      }
    });
    this.addCommand({
      id: "open-sidebar",
      name: "Open Sidebar View",
      callback: () => {
        this.activateView();
      }
    });
    this.addCommand({
      id: "open-random-note",
      name: "Open random note from the current note set",
      callback: () => {
        this.reviewService.openRandomNoteInQueue(this.settings.currentNoteSetId);
      }
    });
    this.addCommand({
      id: "reset-queue",
      name: "reset queue for the current note set",
      callback: () => {
        this.reviewService.resetNotesetQueueWithValidation(this.settings.currentNoteSetId);
      }
    });
    this.addCommand({
      id: "open-modal",
      name: "Select note set for reviewing",
      callback: () => {
        new SelectNoteSetModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "mark-current-note-as-reviewed",
      name: "Mark current note as reviewed",
      callback: () => {
        this.reviewService.reviewNote(this.app.workspace.getActiveFile(), this.settings.currentNoteSetId);
      }
    });
    this.addCommand({
      id: "set-review-frequency-high",
      name: "Set review frequency to high",
      callback: () => {
        this.fileService.setReviewFrequency(this.app.workspace.getActiveFile(), "high" /* high */);
      }
    });
    this.addCommand({
      id: "set-review-frequency-normal",
      name: "Set review frequency to normal",
      callback: () => {
        this.fileService.setReviewFrequency(this.app.workspace.getActiveFile(), "normal" /* normal */);
      }
    });
    this.addCommand({
      id: "set-review-frequency-low",
      name: "Set review frequency to low",
      callback: () => {
        this.fileService.setReviewFrequency(this.app.workspace.getActiveFile(), "low" /* low */);
      }
    });
    this.addCommand({
      id: "set-review-frequency-ignore",
      name: "Set review frequency to none (ignore this note in all reviews)",
      callback: () => {
        this.fileService.setReviewFrequency(this.app.workspace.getActiveFile(), "ignore" /* ignore */);
      }
    });
    this.addCommand({
      id: "skip-note",
      name: "Skip note from current review",
      callback: () => {
        this.reviewService.skipNote(this.app.workspace.getActiveFile(), this.settings.currentNoteSetId);
      }
    });
  }
  activateView() {
    return __async(this, null, function* () {
      this.app.workspace.detachLeavesOfType(SimpleNoteReviewSidebarView.VIEW_TYPE);
      yield this.app.workspace.getRightLeaf(false).setViewState({
        type: SimpleNoteReviewSidebarView.VIEW_TYPE,
        active: true
      });
      this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(SimpleNoteReviewSidebarView.VIEW_TYPE)[0]);
    });
  }
};

/* nosourcemap */